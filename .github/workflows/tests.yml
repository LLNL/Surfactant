name: Python Test Outputs

on:
  pull_request_target:
    types: [opened, reopened, synchronize]
  push:
    tags: [ v* ]

permissions:
  contents: read
  actions: read

jobs:
  diff:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # on pull_request_target explicitly fetch the PR head
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.ref }}

      - name: Determine base SHA
        id: base
        run: |
          # Use the base SHA of the PR
          if [ "${{ github.event_name }}" = "pull_request_target" ]; then
            git fetch origin "${{ github.event.pull_request.base.ref }}"
            git merge-base \
              "${{ github.event.pull_request.head.sha }}" \
              "${{ github.event.pull_request.base.sha }}" \
            > base.sha

          # Use the previous tag
          elif [[ "${{ github.ref_type }}" = "tag" ]]; then
            git fetch --tags
            prev=$(git tag --sort=-creatordate | sed -n '2p')
            git rev-list -n1 "$prev" > base.sha

          # Use the commit before the current one
          else
            echo "${{ github.event.before }}" > base.sha
          fi

          echo "sha=$(cat base.sha)" >> $GITHUB_OUTPUT

      - name: Fetch previous artifact
        id: fetch
        uses: actions/github-script@v6
        env:
          BASE_SHA: ${{ steps.base.outputs.sha }}
          ARTIFACT_NAME: diff-output
        with:
          script: |
            const { owner, repo } = context.repo;
            // list recent successful runs of this workflow
            const runs = await github.actions.listWorkflowRuns({
              owner, repo,
              workflow_id: context.workflow,
              status: "success",
              per_page: 100
            }).then(r => r.data.workflow_runs);

            // find exact SHA match
            let target = runs.find(r => r.head_sha === process.env.BASE_SHA)
                       || runs.find(r => r.id !== context.runId);
            if (!target) {
              console.log("No previous successful run found");
              return;
            }
            console.log(`Using run ${target.id} (${target.head_sha})`);
            
            // locate our artifact
            const arts = await github.actions.listWorkflowRunArtifacts({
              owner, repo,
              run_id: target.id
            });
            const art = arts.data.artifacts.find(a => a.name === process.env.ARTIFACT_NAME);
            if (!art) {
              console.log(`No artifact named ${process.env.ARTIFACT_NAME}`);
              return;
            }

            // download & unzip
            const dl = await github.actions.downloadArtifact({
              owner, repo,
              artifact_id: art.id,
              archive_format: "zip"
            });
            require("fs").writeFileSync("prev.zip", Buffer.from(dl.data));
            require("child_process").execSync("unzip -o prev.zip -d prev");
            core.setOutput("diff_input", "prev/");

      - name: Run diff script
        id: script
        env:
          DIFF_INPUT: ${{ steps.fetch.outputs.diff_input }}
          DIFF_OUTPUT: diff.json
          REPO_PREFIX: https://github.com/${{ github.repository }}/tree/${{ github.sha }}
        run: |
          mkdir -p out
          python scripts/oneshot.py --gha

      - name: Write out summary
        run: |
          echo "${{steps.script.outputs.summary}}" > summary.txt
          cat summary.txt >> $GITHUB_STEP_SUMMARY

      - name: Upload output artifact
        uses: actions/upload-artifact@v4
        with:
          name: diff-output
          path: diff.json
      
      - name: Wipe previous comments (PR)
        if: github.event_name == 'pull_request_target'
        uses: actions/github-script@v7
        with:
          script: |
            const comments = (await github.rest.issues.listComments({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })).data
            const comment = comments.filter(comment => comment.user.login === 'github-actions[bot]');
            if (comment.length > 0) {
              for (const c of comment) {
                await github.graphql(`
                  mutation MinimizeComment($classifier: ReportedContentClassifiers!, $id: ID!) {
                    minimizeComment(input:{classifier: $classifier, subjectId: $id}) {
                      minimizedComment {
                        isMinimized
                        viewerCanMinimize
                      }   
                    }
                  }
                `, { classifier: 'OUTDATED', id: c.node_id });
              }
            }
      
      - name: Post Validation Results (PR)
        if: github.event_name == 'pull_request_target'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = require('fs').readFileSync('summary.txt', 'utf-8');
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
