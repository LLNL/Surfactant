name: Test Regressions

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches: [ '*' ]
    tags: [ v* ]

permissions:
  contents: read
  actions: read

jobs:
  diff:
    name: Regressions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # on pull_request explicitly fetch the PR head
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Surfactant
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[test]
          surfactant version

      - name: Determine base SHA
        id: base
        run: |
          # Use the base SHA of the PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "${{ github.event.pull_request.base.sha }}" > base.sha

          # Use the previous tag
          elif [[ "${{ github.ref_type }}" = "tag" ]]; then
            git fetch --tags
            # Get the tag before the current one in version order
            current_tag="${{ github.ref_name }}"
            prev=$(git tag --sort=-version:refname | grep -v "^${current_tag}$" | head -n1)
            if [ -n "$prev" ]; then
              git rev-list -n1 "$prev" > base.sha
            else
              echo "No previous tag found, using empty base" >&2
              echo "" > base.sha
            fi

          # Use the commit before the current one
          else
            echo "${{ github.event.before }}" > base.sha
          fi

          echo "sha=$(cat base.sha)" >> $GITHUB_OUTPUT

      - name: Fetch previous artifact
        id: fetch
        uses: actions/github-script@v7
        env:
          BASE_SHA: ${{ steps.base.outputs.sha }}
          ARTIFACT_NAME: diff-output
        with:
          script: |
            if (!process.env.BASE_SHA) {
              console.log("No base SHA provided, skipping fetch");
              return;
            }

            const { owner, repo } = context.repo;

            const { data: run } = await github.rest.actions.getWorkflowRun({
              owner,
              repo,
              run_id: context.runId,
            });
            const workflow_id = run.workflow_id;

            // list recent successful runs of this workflow
            const runs = await github.rest.actions.listWorkflowRuns({
              owner, repo,
              workflow_id,
              status: "success",
              per_page: 500
            }).then(r => r.data.workflow_runs);

            // find exact SHA match
            let target = runs.find(r => r.head_sha === process.env.BASE_SHA)
                        || runs.find(r => r.id !== context.run_id);
            if (!target) {
              console.log("No previous successful run found");
              return;
            }
            if (target.head_sha !== process.env.BASE_SHA) {
                console.log(`::warning::Could not find exact SHA match for ${process.env.BASE_SHA}, using run ${target.head_sha} instead`);
            }
            console.log(`Using run ${target.id} (${target.head_sha})`);

            // locate our artifact
            const { data: arts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner, repo,
              run_id: target.id
            });
            const art = arts.artifacts.find(a => a.name === process.env.ARTIFACT_NAME);
            if (!art) {
              console.log(`No artifact named ${process.env.ARTIFACT_NAME}`);
              return;
            }

            // download & unzip
            const dl = await github.rest.actions.downloadArtifact({
              owner, repo,
              artifact_id: art.id,
              archive_format: "zip"
            });
            require("fs").writeFileSync("prev.zip", Buffer.from(dl.data));
            require("child_process").execSync("unzip -o prev.zip -d prev");
            core.setOutput("diff_input", "prev/diff.json");
            core.setOutput("target_id", target.id);
            core.setOutput("target_sha", target.head_sha);

      - name: Run diff script
        id: script
        env:
          DIFF_INPUT: ${{ steps.fetch.outputs.diff_input || '' }}
          DIFF_OUTPUT: diff.json
          SUMMARY_OUTPUT: summary.txt
          REPO: ${{ github.repository }}
          CURRENT_RUN_SHA: ${{ github.sha }}
          CURRENT_RUN_ID: ${{ github.run_id }}
          LAST_RUN_ID: ${{ steps.fetch.outputs.target_id || '' }}
          LAST_RUN_SHA: ${{ steps.fetch.outputs.target_sha || '' }}
          REQUESTED_LAST_SHA: ${{ steps.base.outputs.sha || '' }}
        run: |
          python scripts/regressions.py --gha

      - name: Upload output artifact
        uses: actions/upload-artifact@v4
        with:
          name: diff-output
          path: diff.json

      - name: Save PR Number
        if: github.event_name == 'pull_request'
        run: echo "${{ github.event.pull_request.number }}" > issue_number.txt

      - name: Upload Comment (PR)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: pr
          path: |
            issue_number.txt
            summary.txt
