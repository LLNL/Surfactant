name: Test Regressions

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches: [ '*' ]
    tags: [ v* ]

permissions:
  contents: read
  actions: read

jobs:
  diff:
    name: Regressions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # on pull_request explicitly fetch the PR head
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Surfactant
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[test]
          surfactant version

      - name: Determine base SHA
        id: base
        run: |
          # Use the base SHA of the PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin "${{ github.event.pull_request.base.ref }}"
            git merge-base \
              "${{ github.event.pull_request.head.sha }}" \
              "${{ github.event.pull_request.base.sha }}" \
            > base.sha

          # Use the previous tag
          elif [[ "${{ github.ref_type }}" = "tag" ]]; then
            git fetch --tags
            prev=$(git tag --sort=-creatordate | sed -n '2p')
            git rev-list -n1 "$prev" > base.sha

          # Use the commit before the current one
          else
            echo "${{ github.event.before }}" > base.sha
          fi

          echo "sha=$(cat base.sha)" >> $GITHUB_OUTPUT

      - name: Fetch previous artifact
        id: fetch
        uses: actions/github-script@v7
        env:
          BASE_SHA: ${{ steps.base.outputs.sha }}
          ARTIFACT_NAME: diff-output
        with:
          script: |
            try {
              const { owner, repo } = context.repo;
              
              // list recent successful runs of this workflow
              const runs = await github.rest.actions.listWorkflowRuns({
                owner, repo,
                workflow_id: context.workflow,
                status: "success",
                per_page: 100
              }).then(r => r.data.workflow_runs);

              // find exact SHA match
              let target = runs.find(r => r.head_sha === process.env.BASE_SHA)
                         || runs.find(r => r.id !== context.runId);
              if (!target) {
                console.log("No previous successful run found");
                return;
              }
              console.log(`Using run ${target.id} (${target.head_sha})`);

              // locate our artifact
              const arts = await github.rest.actions.listWorkflowRunArtifacts({
                owner, repo,
                run_id: target.id
              });
              const art = arts.data.artifacts.find(a => a.name === process.env.ARTIFACT_NAME);
              if (!art) {
                console.log(`No artifact named ${process.env.ARTIFACT_NAME}`);
                return;
              }

              // download & unzip
              const dl = await github.rest.actions.downloadArtifact({
                owner, repo,
                artifact_id: art.id,
                archive_format: "zip"
              });
              require("fs").writeFileSync("prev.zip", Buffer.from(dl.data));
              require("child_process").execSync("unzip -o prev.zip -d prev");
              core.setOutput("diff_input", "prev/diff.json");
            } catch (error) {
              console.log(`Failed to fetch previous artifact: ${error.message}`);
              console.log("This is expected for the first run or when no previous artifacts exist");
            }

      - name: Run diff script
        id: script
        env:
          DIFF_INPUT: ${{ steps.fetch.outputs.diff_input || '' }}
          DIFF_OUTPUT: diff.json
          REPO_PREFIX: https://github.com/${{ github.repository }}/tree/${{ github.sha }}
        run: |
          mkdir -p out
          python scripts/regressions.py --gha

      - name: Upload output artifact
        uses: actions/upload-artifact@v4
        with:
          name: diff-output
          path: diff.json

      - name: Create Validation Results Comment (PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = require('fs').readFileSync('summary.txt', 'utf-8');
            
            // Find existing comment from github-actions[bot]
            const comments = (await github.rest.issues.listComments({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })).data;
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]'
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: summary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
